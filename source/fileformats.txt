                    +---------------------------+
                    | BurdockPaint file formats |
                    +---------------------------+


1. Basics
=========

  In this program the data are stored in blocks containing three parts:

    Start    Size     Description
      0       1       Data ID. Shows the data the blocks contains.
                      Possible IDs:
                        I (0x49) - Image data
                        E (0x45) - Extended Image data
                        C (0x43) - Color data
                        R (0x52) - Region data
                        U (0x55) - UndoSystem data for region
                        V (0x56) - UndoSystem data for palette
                        O (0x4F) - Undo operation data for region
                        Q (0x51) - Undo operation data for palette
                        T (0x54) - Color cluster data
                        L (0x4C) - Color clusters data (multiple color clusters)
                        P (0x50) - Project data
      1       4       Size of the block without the Data ID and the size.
      5     [Size]    The data in uncompressed or ZLib compressed format.

  So referring to a C-block is a block like above with a Data ID 0x43.
  Each file is containing exactly one block, but each block can contain more blocks.


2. Detailed block formats
=========================

  Let's see basic blocks first the go to the more complex ones.


2.1. Basic blocks
-----------------

2.1.1. Color data (C-block)
---------------------------

  The standalone color data file (usually with .bdc extension) is a C-block.
  The C-block always has ZLib compressed data. The uncompressed data can
  be one of the 3 versions, allowing store color data efficiently.

  Version 1 uncompressed data structure
  -------------------------------------
    Start   Size                Description (content)
    0       1                   Version marker (0x01)
    1       2                   Count of colors
    3       ColorCount*uint32   Color data

    This is the simplest, stores whole color data after each other.

  Version 2 uncompressed data structure
  -------------------------------------
    Start   Size                Description (content)
    0       1                   Version (0x02)
    1       2                   Count of colors
    3       ColorCount*byte     Blue color data
    .       ColorCount*byte     Green color data
    .       ColorCount*byte     Red color data
    .       ColorCount*byte     Alpha color data

    In this version the color channels are separated allowing greater
    compression ratio in some cases.

  Version 3 uncompressed data structure
  -------------------------------------
    Start   Size                Description (content)
    0       1                  Version (0x03)
    1       2                  Count of colors
    3       ColorCount*byte    Blue color data delta encoded
    .       ColorCount*byte    Green color data delta encoded
    .       ColorCount*byte    Red color data delta encoded
    .       ColorCount*byte    Alpha color data delta encoded

    In this version the separated color channels are delta encoded allowing
    even greater compression ratio with color data containing gradients.

  Delta encoding
  --------------
    First byte is the same as original data
    Second and additional bytes are difference from the previous data byte.

    Example:
      Original data:  01 02 04 05 01 02 01 01
      Delta encoded:  01 01 02 01 FC 01 FF 00

      Encoding:       First=01
                      02-01=01
                      04-02=02
                      05-04=01
                      (01-05) and FF=FC
                      02-01=01
                      (01-02) and FF=FF
                      01-01=00

      Decoding:       First=01
                      01+01=02
                      02+02=04
                      04+01=05
                      (05+FC) and FF=01
                      01+01=02
                      (02+FF) and FF=01
                      01+00=01
                      04+01=05


2.1.2. Region data (R-block)
----------------------------

  Region data is the pixel data of a region of the full image. It is not used
  in standalone files. Region data is an R-block, and always has compressed data.
  The uncompressed region data has only one version yet.

  Version 1 uncompressed region data structure
  --------------------------------------------
    Start   Size                Description (content)
    0       1                   Version (0x01)
    1       2                   Left position of the topleft pixel
    3       2                   Top position of the topleft pixel
    5       2                   Width of the region
    7       2                   Height of the region
    9       width*height*2      Color indices line by line


2.1.3. Region undo operation data (O-block)
-------------------------------------------

  Region undo operation data contains information about one undo/redo operation.
  It is an O-block and has uncompressed data with other blocks inside.

  Undo operation data format
  --------------------------
    Start   Size        Description (content)
    5       ???         The affected region before the operation in, an R-block
    .       ???         The affected region after the operation in, an R-block


2.1.4. Palette undo operation data (Q-block)
-------------------------------------------

  Palette undo operation data contains information about one undo/redo operation.
  It is an Q-block and has uncompressed data with other blocks inside.

  Undo operation data format
  --------------------------
    Start   Size        Description (content)
    5       2           First affected color in the palette
    7       ???         The affected color data before the operation, in a C-block
    .       ???         The affected color data after the operation, in a C-block


2.1.5. Color cluster data (T-block)
-----------------------------------

  Contains info about a color cluster (but not the palette data).
  It's a T-block with uncompressed data.

  Color cluster data format
  -------------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       2           Start color index
    8       2           End color index
    10      1           Flags
                          bit 0 - reversed
                          bit 1 - pingpong


2.2. Complex blocks
-------------------

2.2.1. Image data (I-block)
---------------------------

  Image data consist of two parts, color data and region data containing the
  full image. It is an I-block containing a C-block and an R-block, so itself has
  uncommpressed data, but the two inside block has compressed data as written above.
  The usual extension is .bdi.

  Image data format
  -----------------
    Start   Size        Description (content)
    5       ???         Color data in a C-block
    .       ???         Region data in an R-block


2.2.2. UndoSystem data for region (U-block)
-------------------------------------------

  UndoSystem data contains info about undo/redo operations. It is an U-block
  and has uncompressed data with O-blocks inside.

  UndoSystem data format
  ----------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       2           Undo/redo operation count
    8       2           Index of current operation
    10      ???         O-blocks (count times)


2.2.3. UndoSystem data for palette (V-block)
--------------------------------------------

  UndoSystem data contains info about undo/redo operations. It is an V-block
  and has uncompressed data with Q-blocks inside.

  UndoSystem data format
  ----------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       2           Undo/redo operation count
    8       2           Index of current operation
    10      ???         Q-blocks (count times)


2.2.4. Color clusters data (L-block)
------------------------------------

  Contains multiple color clusters (T-blocks).
  It's an L-block with uncompressed data.

  Color clusters data format
  --------------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       1           Color cluster count
    7       ???         Color cluster data [T-block], count times


2.2.5. Extended Image data (E-block)
------------------------------------

  Extended Image data can contain 3 additional blocks over the simple Image data.
  Beside the usual color data and region data there can be additional
  ImageUndoSystem, ColorUndoSystem Data and Color Clusters Data. It is an E-block
  containing a C-block, an R-block and probably an U-block, a V-block and an L-block.
  The block data itself is not compressed, the sub-blocks can have compressed
  data.

  Extended image data format
  --------------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       1           Flags
                          bit 0 - not used
                          bit 1 - Is data contains ImageUndoSystem data?
                          bit 2 - Is data contains PaletteUndoSystem data?
                          bit 3 - Is data state contains ColorClusters data?
    7       ???         Color data in a C-block
    .       ???         Region data in an R-block
   [.       ???]        if Flags.bit[1] is set then ImageUndoSystem data in an U-block
   [.       ???]        if Flags.bit[2] is set then PaletteUndoSystem data in an V-block
   [.       ???]        if Flags.bit[3] is set then ColorClusters data in an L-block


2.2.6. Project data (P-block)
-----------------------------

  (This will replace system state)

  Project data is the summary of the images of a project. It contains:
    - one or more extended images (pixel, color, undo and colorcluster data in E-blocks)
    - zero or one CEL image (since it shared between the images) (I-block)

  It is a P-block with uncompressed data.

  Project data format
  -------------------
    Start   Size        Description (content)
    5       1           Version (0x01)
    6       1           Flags
                          bit 0 - Is project contains the CELImage?
    7       2           Image count
    9       2           Active image index
    11      ???         First image in an E-block
   [.       ???]        More images in E-blocks
   [.       ???]        If Flags.bit[0] is set then CELImage in an I-block


3. Standalone file formats
==========================

3.1. Image file format (.bpimg)
-----------------------------

It is an Extended Image data block (E-block). Loading an image replaces the
current image (and palette), undo states and color clusters.


3.2. CEL file format (.bpcel)
---------------------------

It is an Image data block (I-block). The difference between an Image and a CEL is
that loading a CEL won't replace the current image (it will replace the current
CEL if there is one) and it will always use the current palette, adapting to it
in one of the ways below:
  - Color Fit: CEL colors will be matched with colors of the current palette.
    The CEL will look similar with original if the palette has similar colors.
    (If the color was red, it will find the closest color to red, changing the
    color index to that value.)
  - No Color Fit: CEL will use colors of color indices in current palette
    irregarding the color similarity with original color. (If the color was red,
    but the same colorindex now has the color of blue it will be blue, since the
    color index not changing.)


3.3. System state file format (.bpstate)
------------------------------------

It is a System State data block (S-block).


3.4. Project file format (.bpprj)
---------------------------------
It is a Project data block (P-block).

